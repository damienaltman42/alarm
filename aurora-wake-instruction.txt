# 📌 Projet de Réveil Intelligent avec Radio en React Native (Expo + TypeScript)

**Contexte du projet**  
Nous développons une application de réveil (aurora-wake) avancée en **React Native (Expo)** qui permettra aux utilisateurs de **configurer des alarmes réveil** avec une **station de radio** à la place d’une sonnerie classique.  

### **📌 Spécifications du projet**  
1. **Gestion complète des alarmes**  
   - Ajouter, modifier et supprimer une alarme.  
   - Sélectionner l’heure et les jours de répétition (ex: réveil chaque lundi et jeudi).  
   - Activer/désactiver une alarme avec un **switch toggle**.  
   - Stockage local des alarmes (AsyncStorage ou SQLite).  

2. **Mode Radio**  Documentation dans le fichier "DOC-API-Radio-Browser.md"
   - L’utilisateur choisit une station de radio pour chaque alarme.  
   - Intégration de **l’API Radio-Browser** pour rechercher les radios en fonction (DOC-API-Radio-Browser.md):  
     - Du genre musical 🎵  
     - Du pays 🌍  
     - Du nom de la station 🔎  
   - Lecture de la radio avec **expo-av**, support du mode **arrière-plan**.  
   - La radio sélectionnée démarre automatiquement à l’heure de l’alarme.  

3. **Notifications et réveil**  
   - L’alarme déclenche une **notification locale** à l’heure prévue.  
   - L’utilisateur peut **arrêter ou snoozer** via la notification.  
   - L’**écran se réveille** si l’appareil le permet (iOS).  

4. **Interface moderne et ergonomique**  
   - **Navigation fluide** avec React Navigation.  
   - Design minimaliste et **mode sombre/clair auto**.  
   - Animations (ex: transition douce entre les écrans, animation du toggle d’alarme).  

### **📂 Structure du projet**  
Le projet doit être bien organisé et modulaire :  

/components → Composants UI réutilisables
/screens → Écrans principaux (AlarmListScreen, AddAlarmScreen, SearchRadioScreen)
/modules → Services (gestion des alarmes, intégration API Radio-Browser)
/navigation → Configuration React Navigation


### **🔧 Contraintes Techniques**  
- **React Native avec Expo (workflow géré).**  
- **TypeScript** obligatoire.  
- **expo-av** pour la lecture audio.  
- **expo-notifications** pour les alarmes.  
- **API Radio-Browser** pour récupérer les stations de radio.  
- **Stockage des alarmes** avec AsyncStorage ou SQLite.  

### **🚀 Instructions pour générer l’application complète**  
Claude, génère **toute l’application React Native complète** (Expo + TypeScript) correspondant aux spécifications ci-dessus.  

1. Crée tous les fichiers nécessaires :  
   - **App.tsx** : point d’entrée de l’application.  
   - **Navigation.tsx** : configuration de la navigation.  
   - **AlarmListScreen.tsx** : affichage des alarmes programmées.  
   - **AddAlarmScreen.tsx** : écran pour créer/modifier une alarme.  
   - **SearchRadioScreen.tsx** : écran pour rechercher une radio via l’API.  
   - **RadioService.ts** : module pour récupérer les radios depuis Radio-Browser.  
   - **AlarmManager.ts** : gestion des alarmes et notifications locales.  

2. Génère le code en respectant les **bonnes pratiques** :  
   - **Code modulaire et maintenable.**  
   - **Utilisation d’interfaces TypeScript** pour structurer les données.  
   - **Noms de variables explicites et commentaires** pour expliquer le code.  
   - **Respect des conventions React Native** (hooks, séparation des préoccupations).  

3. Assure-toi que le code généré est **prêt à l’emploi** :  
   - Toutes les **dépendances installées** (`expo install react-navigation expo-av expo-notifications`).  
   - L’application peut être exécutée immédiatement avec `expo start`.  
   - Inclure un **README** expliquant comment tester et configurer l’API Radio-Browser.  

### **📌 Livrable attendu**  
Claude, génère **l’ensemble du code source** avec une structure propre et des explications. Fournis les fichiers séparément en Markdown pour une meilleure lisibilité (ex: `App.tsx`, `AlarmListScreen.tsx`, `RadioService.ts`).  


