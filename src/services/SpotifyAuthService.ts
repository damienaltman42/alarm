// Importations conditionnelles pour √©viter les erreurs dans Expo Go
let auth: any = null;
let remote: any = null;
let spotifyModulesLoaded = false;

try {
  const spotifyRemote = require('react-native-spotify-remote');
  auth = spotifyRemote.auth;
  remote = spotifyRemote.remote;
  spotifyModulesLoaded = true;
  console.log('Module Spotify charg√© avec succ√®s:', !!auth, !!remote);
} catch (error: any) {
  console.warn('Erreur lors du chargement du module Spotify:', error.message);
}

import AsyncStorage from '@react-native-async-storage/async-storage';
import { Platform, Alert, Linking } from 'react-native';
import { SpotifyAuthConfig, SpotifyTokens, SpotifyConnectionInfo } from '../types/spotify';

// Cl√©s de stockage dans AsyncStorage
const SPOTIFY_ACCESS_TOKEN_KEY = 'spotify_access_token';
const SPOTIFY_REFRESH_TOKEN_KEY = 'spotify_refresh_token';
const SPOTIFY_EXPIRATION_KEY = 'spotify_expiration';
// Cl√© pour stocker la m√©thode d'authentification
const SPOTIFY_AUTH_METHOD_KEY = 'spotify_auth_method';

// Configuration par d√©faut pour Spotify
const defaultConfig: SpotifyAuthConfig = {
  clientId: '39d474184067408497b09fad92b1c0fa',
  tokenRefreshUrl: 'https://refreshspotifytoken-cfrizo5ptq-ew.a.run.app',
  tokenSwapUrl: 'https://swapspotifytoken-cfrizo5ptq-ew.a.run.app',
  redirectUrl: Platform.select({
    ios: 'aurorawake://spotify-auth-callback',
    android: 'aurorawake://spotify-auth-callback',
  }) || 'aurorawake://spotify-auth-callback',
  scopes: [
    'user-read-private',
    'user-read-email',
    'playlist-read-private',
    'user-modify-playback-state',
    'streaming'
  ],
};

// URL Spotify pour v√©rifier si l'application est install√©e
const SPOTIFY_APP_URL = Platform.select({
  ios: 'spotify:',
  android: 'spotify:',
}) || 'spotify:';

// V√©rifier si la redirection est correctement configur√©e
const checkSpotifyRedirectConfig = () => {
  console.log('URL de redirection Spotify configur√©e:', defaultConfig.redirectUrl);
  
  // V√©rifier que l'URL est dans le bon format
  if (!defaultConfig.redirectUrl.includes('://')) {
    console.error('URL de redirection mal format√©e:', defaultConfig.redirectUrl);
    return false;
  }
  
  // V√©rifier le scheme sp√©cifique √† iOS
  if (Platform.OS === 'ios' && !defaultConfig.redirectUrl.startsWith('aurorawake://')) {
    console.warn('Sur iOS, le scheme devrait commencer par aurorawake://', defaultConfig.redirectUrl);
  }
  
  return true;
};

// Initialiser la v√©rification de la redirection
checkSpotifyRedirectConfig();

// V√©rifier si les modules Spotify sont disponibles
const isSpotifySDKAvailable = () => {
  const result = spotifyModulesLoaded && auth !== null && remote !== null;
  console.log('V√©rification disponibilit√© SDK Spotify:', result);
  return result;
};

// V√©rifier si l'application Spotify est install√©e
const isSpotifyAppInstalled = async (): Promise<boolean> => {
  try {
    console.log('V√©rification si Spotify est install√©...');
    const canOpen = await Linking.canOpenURL(SPOTIFY_APP_URL);
    console.log('Spotify install√©:', canOpen);
    return canOpen;
  } catch (error) {
    console.warn('Erreur lors de la v√©rification de l\'installation de Spotify:', error);
    return false;
  }
};

// Ouvrir l'application Spotify avant l'authentification
const openSpotifyApp = async (): Promise<boolean> => {
  try {
    console.log('Tentative d\'ouverture de l\'application Spotify...');
    await Linking.openURL(SPOTIFY_APP_URL);
    
    // Attendre un moment pour que Spotify s'ouvre
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    console.log('Application Spotify ouverte avec succ√®s');
    return true;
  } catch (error) {
    console.warn('Erreur lors de l\'ouverture de Spotify:', error);
    return false;
  }
};

class SpotifyAuthService {
  private isInitialized = false;
  private connectionInfo: SpotifyConnectionInfo = {
    isConnected: false,
    isSpotifyInstalled: false,
    isPremium: false
  };
  private config: SpotifyAuthConfig = defaultConfig;
  // Ajouter un flag pour suivre quelle m√©thode d'authentification est utilis√©e
  private isUsingAlternativeAuth = false;

  /**
   * Initialise le SDK Spotify
   */
  async initialize(): Promise<boolean> {
    // Restaurer le flag d'authentification alternative d√®s le d√©but
    await this.restoreAuthMethod();
    
    // Si nous utilisons l'authentification alternative, consid√©rer comme initialis√©
    if (this.isUsingAlternativeAuth) {
      console.log('üîÑ Utilisation de l\'authentification alternative, ignorant l\'initialisation du SDK natif');
      this.isInitialized = true;
      
      // V√©rifier si nous avons un token valide
      const hasToken = await this.hasValidToken();
      if (hasToken) {
        this.connectionInfo.isConnected = true;
        console.log('Token valide trouv√©, utilisation de l\'authentification alternative');
      }
      
      return true;
    }

    if (this.isInitialized) return true;

    try {
      // V√©rifier si les modules Spotify sont disponibles
      if (!isSpotifySDKAvailable()) {
        console.warn('Les modules Spotify ne sont pas disponibles dans cet environnement.');
        
        // Debug info
        if (Platform.OS === 'ios') {
          // Sur un appareil r√©el, essayons de forcer l'initialisation
          try {
            const spotifyRemote = require('react-native-spotify-remote');
            console.log('Tentative forc√©e de charger Spotify:', !!spotifyRemote.auth, !!spotifyRemote.remote);
          } catch (error: any) {
            console.error('Erreur lors de la tentative forc√©e:', error.message);
          }
        }
        
        return false;
      }

      console.log('SDK Spotify disponible, initialisation...');
      
      // Sur iOS, nous supposons que Spotify est install√© 
      // La v√©rification isSpotifyInstalled n'est pas fiable dans ce SDK
      this.connectionInfo.isSpotifyInstalled = true;
      
      try {
        // Initialiser avec la configuration
        console.log('Tentative d\'initialisation avec config:', this.config.clientId);
        const configToUse = {
          clientID: this.config.clientId,
          redirectURL: this.config.redirectUrl,
          tokenRefreshURL: this.config.tokenRefreshUrl,
          tokenSwapURL: this.config.tokenSwapUrl,
          scopes: this.config.scopes,
        };
        
        console.log('Configuration d\'initialisation compl√®te:', JSON.stringify(configToUse));
        
        // V√©rifier si l'URL de redirection est bien configur√©e
        if (!this.config.redirectUrl.includes('://')) {
          console.error('URL de redirection mal format√©e, cela peut causer des probl√®mes');
        }
        
        // Ajouter un timeout pour l'initialisation, mais plus long (15 secondes)
        const initPromise = auth.initialize(configToUse);
        const timeoutPromise = new Promise<any>((_, reject) => {
          setTimeout(() => reject(new Error('Initialisation timeout - v√©rifiez votre connexion')), 15000);
        });
        
        // Race entre l'initialisation et le timeout
        const result = await Promise.race([initPromise, timeoutPromise]);
        console.log('Initialisation r√©ussie:', result);
        
        // Restaurer les tokens si disponibles
        await this.restoreAccessToken();
        
        this.isInitialized = true;
        return true;
      } catch (error: any) {
        console.error('Erreur lors de l\'initialisation de Spotify:', error.message);
        
        // Information de debug suppl√©mentaire
        if (error.message.includes('clientID cannot be null')) {
          console.error('Configuration invalide. ClientID manquant:', this.config);
        } else if (error.message.includes('timeout')) {
          console.error('Timeout lors de l\'initialisation Spotify');
        } else if (error.message.includes('Code manquant')) {
          console.log('V√©rifiez que l\'application Spotify est install√©e et que vous avez accept√© l\'autorisation');
          
          // Si nous avons un token valide, utiliser l'authentification alternative
          const hasToken = await this.hasValidToken();
          if (hasToken) {
            console.log('Token valide trouv√©, utilisation de l\'authentification alternative');
            this.isUsingAlternativeAuth = true;
            this.isInitialized = true;
            this.connectionInfo.isConnected = true;
            return true;
          }
        }
        
        return false;
      }
    } catch (error: any) {
      console.error('Erreur globale lors de l\'initialisation de Spotify:', error.message);
      return false;
    }
  }

  /**
   * Authentifie l'utilisateur aupr√®s de Spotify
   */
  async authorize(): Promise<boolean> {
    try {
      // Si nous utilisons d√©j√† l'authentification alternative avec un token valide
      if (this.isUsingAlternativeAuth) {
        const hasToken = await this.hasValidToken();
        if (hasToken) {
          console.log('‚úÖ D√©j√† authentifi√© avec la m√©thode alternative');
          return true;
        }
        // Sinon, essayer d'utiliser la m√©thode d'authentification alternative
        return await this.authorizeAlternative();
      }

      // V√©rifier si le service est initialis√©
      if (!this.isInitialized) {
        console.log('Initialisation du service Spotify...');
        await this.initialize();
      }

      // V√©rifier si nous disposons d√©j√† d'un token valide
      const hasToken = await this.hasValidToken();
      if (hasToken) {
        console.log('Token valide trouv√©, connexion au service distant...');
        await this.connectRemote();
        return true;
      }

      console.log('Tentative d\'authentification Spotify...');
      
      try {
        if (!isSpotifySDKAvailable()) {
          console.error('SDK Spotify non disponible');
          return false;
        }
        
        const apiConfig = {
          clientID: this.config.clientId,
          redirectURL: this.config.redirectUrl,
          tokenSwapURL: this.config.tokenSwapUrl,
          tokenRefreshURL: this.config.tokenRefreshUrl,
          scopes: this.config.scopes,
        };
        
        console.log('Configuration d\'authentification:', JSON.stringify(apiConfig));
        
        // V√©rifier que nous pouvons ouvrir l'URL de redirection
        const canOpenURL = await Linking.canOpenURL(apiConfig.redirectURL);
        console.log(`üîç L'application peut-elle ouvrir l'URL de redirection? ${canOpenURL ? 'Oui' : 'Non'}`);
        
        if (!canOpenURL) {
          console.warn('‚ö†Ô∏è L\'application ne peut pas ouvrir l\'URL de redirection. Le sch√©ma d\'URL peut ne pas √™tre correctement enregistr√©.');
        }
        
        // V√©rifier si l'application Spotify est install√©e
        const isSpotifyInstalled = await isSpotifyAppInstalled();
        console.log(`üéµ L'application Spotify est-elle install√©e? ${isSpotifyInstalled ? 'Oui' : 'Non'}`);
        
        if (isSpotifyInstalled) {
          console.log('üöÄ Tentative d\'ouverture de l\'application Spotify avant authentification...');
          try {
            // Ouvrir l'application Spotify
            const opened = await openSpotifyApp();
            if (!opened) {
              console.warn('‚ö†Ô∏è Impossible d\'ouvrir l\'application Spotify, mais elle est install√©e');
            }
          } catch (e) {
            console.error('‚ùå Erreur lors de l\'ouverture de Spotify:', e);
          }
        } else {
          console.warn('‚ö†Ô∏è L\'application Spotify n\'est pas install√©e');
          Alert.alert(
            'Spotify non install√©',
            'Veuillez installer l\'application Spotify pour utiliser cette fonctionnalit√©.'
          );
          return false;
        }
        
        // Appel √† la m√©thode d'authentification avec gestion des erreurs am√©lior√©e
        console.log('üîê Lancement de l\'authentification Spotify avec URL de redirection:', apiConfig.redirectURL);
        console.log('üîç V√©rification que les param√®tres sont corrects:');
        console.log('  - ClientID:', !!apiConfig.clientID);
        console.log('  - TokenSwapURL:', !!apiConfig.tokenSwapURL);
        console.log('  - TokenRefreshURL:', !!apiConfig.tokenRefreshURL);
        console.log('  - Scopes:', apiConfig.scopes.join(', '));
        
        const res = await auth.authorize(apiConfig);
        console.log('‚úÖ Authentification r√©ussie:', !!res.accessToken);
        
        if (!res.accessToken) {
          console.error('‚ùå Token d\'acc√®s non re√ßu apr√®s authentification');
          return false;
        }
        
        // Sauvegarder les tokens
        await this.saveTokens({
          accessToken: res.accessToken,
          refreshToken: res.refreshToken, 
          expirationDate: Date.now() + (res.expiresIn ? parseInt(res.expiresIn) : 3600) * 1000
        });

        // Connecter au service distant Spotify
        await this.connectRemote();
        
        return true;
      } catch (error: any) {
        console.error('‚ùå Erreur lors de l\'authentification Spotify:', error.message);
        
        // V√©rifier si l'erreur contient "code" pour voir si c'est li√© √† la redirection
        if (error.message && error.message.includes('code')) {
          console.error('‚ö†Ô∏è Erreur li√©e au code d\'autorisation. V√©rifiez que l\'URL de redirection est correctement enregistr√©e dans la console d√©veloppeur Spotify.');
          console.error('‚ö†Ô∏è V√©rifiez que l\'URL suivante est bien enregistr√©e: ' + this.config.redirectUrl);
          
          // Essayer la m√©thode alternative
          console.log('‚ö†Ô∏è √âchec de l\'authentification native, tentative avec la m√©thode alternative...');
          return await this.authorizeAlternative();
        }
        
        // G√©rer les erreurs sp√©cifiques
        if (error.message && (
          error.message.includes('clientID cannot be null') || 
          error.message.includes('client') && error.message.includes('null')
        )) {
          console.error('‚ùå Erreur de configuration ClientID:', this.config);
          Alert.alert(
            'Erreur de configuration',
            'La configuration Spotify est incorrecte. Veuillez contacter le support.'
          );
        } else if (error.message && error.message.includes('Spotify app is not installed')) {
          Alert.alert(
            'Spotify non install√©',
            'Veuillez installer l\'application Spotify depuis l\'App Store pour utiliser cette fonctionnalit√©.'
          );
        } else {
          Alert.alert(
            'Erreur d\'authentification',
            'Impossible de se connecter √† Spotify. Veuillez r√©essayer. Erreur: ' + error.message
          );
        }
        
        return false;
      }
    } catch (error: any) {
      console.error('‚ùå Erreur lors de l\'authentification Spotify:', error.message);
      return false;
    }
  }

  /**
   * D√©connecte l'utilisateur de Spotify
   */
  async logout(): Promise<void> {
    try {
      if (!isSpotifySDKAvailable()) {
        await this.clearTokens();
        return;
      }

      await remote.disconnect();
      try {
        await auth.endSession();
      } catch (error) {
        console.log('Erreur ignor√©e lors de la fin de session:', error);
      }
      await this.clearTokens();
      
      this.connectionInfo.isConnected = false;
      this.connectionInfo.isPremium = false;
    } catch (error) {
      console.error('Erreur lors de la d√©connexion de Spotify:', error);
    }
  }

  /**
   * Connecte l'application au service distant Spotify
   */
  private async connectRemote(): Promise<void> {
    try {
      console.log('D√©marrage de la connexion au service distant Spotify...');
      if (!isSpotifySDKAvailable()) {
        console.warn('SDK Spotify non disponible, impossible de connecter au remote');
        return;
      }

      const token = await this.getAccessToken();
      if (!token) {
        console.error('Aucun token disponible pour la connexion remote');
        throw new Error('No token available');
      }

      console.log('Tentative de connexion au service distant Spotify avec token');
      try {
        // Sur iOS, nous supposons que Spotify est install√©
        // La v√©rification isSpotifyInstalled n'est pas disponible dans cette version du SDK
        this.connectionInfo.isSpotifyInstalled = true;
        
        // Ajout d'un timeout pour la connexion
        const connectPromise = remote.connect(token);
        const timeoutPromise = new Promise((_, reject) => {
          setTimeout(() => reject(new Error('Connexion timeout - application Spotify peut-√™tre non install√©e')), 5000);
        });
        
        // Race entre la connexion et le timeout
        await Promise.race([connectPromise, timeoutPromise]);
        
        console.log('Connexion au service distant Spotify r√©ussie');
        this.connectionInfo.isConnected = true;
  
        // Nous supposons que l'utilisateur a un compte premium
        // Certaines API pour v√©rifier cela ne sont pas fiables sur toutes les versions du SDK
        this.connectionInfo.isPremium = true;
        console.log('√âtat de connexion mis √† jour:', this.connectionInfo);
      } catch (error: any) {
        console.error('Erreur lors de la connexion au service distant:', error.message);
        
        // Si nous avons une erreur sp√©cifique sur l'application Spotify
        if (error.message && (
          error.message.includes('Spotify app is not installed') || 
          error.message.includes('No spotify installed') ||
          error.message.includes('timeout')
        )) {
          console.warn('Application Spotify non install√©e d√©tect√©e via erreur');
          Alert.alert(
            'Spotify non install√©',
            'Veuillez installer l\'application Spotify depuis l\'App Store pour utiliser cette fonctionnalit√©.'
          );
          this.connectionInfo.isSpotifyInstalled = false;
        } else if (error.message && (
          error.message.includes('premium') || 
          error.message.includes('subscription')
        )) {
          // Si l'erreur indique un probl√®me d'abonnement
          console.warn('Utilisateur sans compte Premium d√©tect√© via erreur');
          this.connectionInfo.isPremium = false;
          Alert.alert(
            'Compte Premium requis',
            'Un compte Spotify Premium est n√©cessaire pour utiliser cette fonctionnalit√©.'
          );
        } else {
          // Pour toute autre erreur, on consid√®re qu'on est connect√© √† Spotify
          // mais que nous n'avons pas pu √©tablir la connexion remote
          console.log('Erreur non sp√©cifique, on suppose connect√© √† Spotify mais sans remote');
          this.connectionInfo.isConnected = true;
        }
      }
    } catch (error: any) {
      console.error('Erreur lors de la connexion au service distant Spotify:', error.message);
      this.connectionInfo.isConnected = false;
    }
  }

  /**
   * V√©rifie si un token d'acc√®s valide est disponible
   */
  async hasValidToken(): Promise<boolean> {
    try {
      const expiration = await AsyncStorage.getItem(SPOTIFY_EXPIRATION_KEY);
      const token = await AsyncStorage.getItem(SPOTIFY_ACCESS_TOKEN_KEY);
      
      if (!token || !expiration) return false;
      
      // V√©rifier si le token est expir√© (avec 5 minutes de marge)
      const expirationTime = parseInt(expiration, 10);
      const isValid = expirationTime > Date.now() + (5 * 60 * 1000);
      
      // Si le token est valide, mettre √† jour l'√©tat d'authentification
      if (isValid) {
        console.log('Token Spotify valide trouv√©');
        
        // Si nous avons un token valide, nous sommes probablement connect√©s
        // via la m√©thode alternative (le SDK natif ne stocke pas ses tokens de cette fa√ßon)
        this.isUsingAlternativeAuth = true;
        this.connectionInfo.isConnected = true;
        this.isInitialized = true;
        
        // Sauvegarder la m√©thode pour les prochaines utilisations
        await this.saveAuthMethod();
      }
      
      return isValid;
    } catch (error) {
      console.error('Erreur lors de la v√©rification de la validit√© du token:', error);
      return false;
    }
  }

  /**
   * R√©cup√®re le token d'acc√®s actuel
   */
  async getAccessToken(): Promise<string | null> {
    try {
      return await AsyncStorage.getItem(SPOTIFY_ACCESS_TOKEN_KEY);
    } catch (error) {
      console.error('Erreur lors de la r√©cup√©ration du token d\'acc√®s:', error);
      return null;
    }
  }

  /**
   * Sauvegarde les tokens d'authentification
   */
  private async saveTokens(tokens: SpotifyTokens): Promise<void> {
    try {
      await AsyncStorage.setItem(SPOTIFY_ACCESS_TOKEN_KEY, tokens.accessToken);
      if (tokens.refreshToken) {
        await AsyncStorage.setItem(SPOTIFY_REFRESH_TOKEN_KEY, tokens.refreshToken);
      }
      await AsyncStorage.setItem(SPOTIFY_EXPIRATION_KEY, tokens.expirationDate.toString());
      
      // Sauvegarder la m√©thode d'authentification utilis√©e
      if (this.isUsingAlternativeAuth) {
        await this.saveAuthMethod();
      }
    } catch (error) {
      console.error('Erreur lors de la sauvegarde des tokens:', error);
    }
  }

  /**
   * Restaure le token d'acc√®s √† partir du stockage
   */
  private async restoreAccessToken(): Promise<void> {
    try {
      const accessToken = await AsyncStorage.getItem(SPOTIFY_ACCESS_TOKEN_KEY);
      const refreshToken = await AsyncStorage.getItem(SPOTIFY_REFRESH_TOKEN_KEY);
      const expiration = await AsyncStorage.getItem(SPOTIFY_EXPIRATION_KEY);

      if (accessToken && expiration) {
        const expirationTime = parseInt(expiration, 10);
        
        // Si le token est expir√©, essayer de le rafra√Æchir
        if (expirationTime <= Date.now() && refreshToken) {
          // La logique de rafra√Æchissement du token serait ici
          // mais elle n√©cessite un backend, donc on va simplement demander 
          // √† l'utilisateur de se reconnecter
          return;
        }
      }
    } catch (error) {
      console.error('Erreur lors de la restauration du token d\'acc√®s:', error);
    }
  }

  /**
   * Efface les tokens stock√©s
   */
  private async clearTokens(): Promise<void> {
    try {
      await AsyncStorage.removeItem(SPOTIFY_ACCESS_TOKEN_KEY);
      await AsyncStorage.removeItem(SPOTIFY_REFRESH_TOKEN_KEY);
      await AsyncStorage.removeItem(SPOTIFY_EXPIRATION_KEY);
      // Effacer aussi la m√©thode d'authentification
      await this.clearAuthMethod();
    } catch (error) {
      console.error('Erreur lors de l\'effacement des tokens:', error);
    }
  }

  /**
   * Obtient les informations sur la connexion Spotify
   */
  getConnectionInfo(): SpotifyConnectionInfo {
    return { ...this.connectionInfo };
  }

  /**
   * R√©initialise compl√®tement la connexion Spotify et tente une nouvelle authentification
   * Utile en cas de probl√®mes de connexion persistants
   */
  async resetAndReconnect(): Promise<boolean> {
    try {
      console.log('üîÑ R√©initialisation de la connexion Spotify...');
      
      // R√©initialiser les √©tats
      this.isInitialized = false;
      this.connectionInfo = {
        isConnected: false,
        isSpotifyInstalled: false,
        isPremium: false
      };
      
      // Effacer les tokens existants
      await this.clearTokens();
      
      // Si les modules ne sont pas disponibles, retourner imm√©diatement
      if (!isSpotifySDKAvailable()) {
        console.warn('‚ö†Ô∏è Les modules Spotify ne sont pas disponibles dans cet environnement.');
        return false;
      }
      
      // Essayer de d√©connecter la session existante
      try {
        console.log('üîå Tentative de d√©connexion de la session existante...');
        await remote.disconnect();
        try {
          await auth.endSession();
        } catch (sessionError) {
          console.log('‚ÑπÔ∏è Erreur ignor√©e lors de la fin de session:', sessionError);
        }
      } catch (disconnectError) {
        console.log('‚ÑπÔ∏è Erreur ignor√©e lors de la d√©connexion:', disconnectError);
        // On continue malgr√© cette erreur
      }
      
      // Attendre un court instant pour s'assurer que tout est d√©connect√©
      await new Promise(resolve => setTimeout(resolve, 500));
      
      // R√©initialiser le module Spotify (lorsque possible)
      try {
        if (Platform.OS === 'ios') {
          console.log('üîÑ Tentative de recharger le module Spotify...');
          const spotifyRemote = require('react-native-spotify-remote');
          auth = spotifyRemote.auth; 
          remote = spotifyRemote.remote;
          spotifyModulesLoaded = !!(auth && remote);
          console.log('‚úÖ Module Spotify recharg√©:', spotifyModulesLoaded);
        }
      } catch (reloadError) {
        console.warn('‚ö†Ô∏è Erreur lors du rechargement du module:', reloadError);
      }
      
      // R√©initialiser et tenter une nouvelle connexion
      console.log('üîÑ Tentative de r√©initialisation compl√®te...');
      const initialized = await this.initialize();
      if (!initialized) {
        console.error('‚ùå √âchec de la r√©initialisation - Impossible d\'initialiser Spotify');
        return false;
      }
      
      // V√©rifier si nous avons d√©j√† un token valide apr√®s l'initialisation
      const hasToken = await this.hasValidToken();
      if (hasToken) {
        console.log('‚úÖ Token valide restaur√©, connexion au service distant...');
        await this.connectRemote();
        return true;
      }
      
      // Tenter une nouvelle authentification avec des logs d√©taill√©s
      console.log('üîê Tentative d\'authentification apr√®s r√©initialisation...');
      
      // Essayer d'abord l'authentification standard SDK
      console.log('üîç Essai de l\'authentification standard Spotify...');
      let authResult = await this.authorize();
      
      // Si l'authentification standard √©choue, essayer l'alternative
      if (!authResult) {
        console.log('‚ö†Ô∏è Authentification standard √©chou√©e, tentative d\'authentification alternative...');
        authResult = await this.authorizeAlternative();
      }
      
      console.log('üìä R√©sultat de l\'authentification apr√®s r√©initialisation:', authResult);
      
      return authResult;
    } catch (error: any) {
      console.error('‚ùå Erreur lors de la r√©initialisation de Spotify:', error.message);
      Alert.alert(
        'Erreur de r√©initialisation',
        'La tentative de r√©initialisation a √©chou√©. Veuillez r√©essayer plus tard.'
      );
      return false;
    }
  }

  /**
   * Teste la configuration Spotify sans tenter de se connecter
   * Utile pour diagnostiquer les probl√®mes de configuration
   */
  async testConfiguration(): Promise<string> {
    try {
      console.log('Test de la configuration Spotify...');
      
      // V√©rifier si les modules sont charg√©s
      if (!isSpotifySDKAvailable()) {
        return 'Modules Spotify non disponibles';
      }
      
      // V√©rifier la configuration
      const configTest = {
        clientID: this.config.clientId,
        redirectURL: this.config.redirectUrl,
        tokenSwapURL: this.config.tokenSwapUrl,
        tokenRefreshURL: this.config.tokenRefreshUrl,
        scopes: this.config.scopes,
      };
      
      console.log('Configuration √† tester:', JSON.stringify(configTest));
      
      // V√©rifier la redirection URL
      if (!this.config.redirectUrl.includes('://')) {
        return 'URL de redirection mal format√©e';
      }
      
      // V√©rifier le client ID
      if (!this.config.clientId) {
        return 'Client ID manquant';
      }
      
      // V√©rifier si l'app Spotify est install√©e
      // Note: Cette m√©thode n'est pas fiable dans toutes les versions du SDK
      try {
        const isSpotifyInstalled = this.connectionInfo.isSpotifyInstalled;
        if (!isSpotifyInstalled) {
          return 'Spotify ne semble pas √™tre install√©';
        }
      } catch (error) {
        console.warn('Impossible de v√©rifier si Spotify est install√©');
      }
      
      return 'Configuration correcte';
    } catch (error: any) {
      console.error('Erreur lors du test de configuration:', error.message);
      return `Erreur: ${error.message}`;
    }
  }

  /**
   * Renvoie la configuration Spotify actuelle
   */
  getConfig(): SpotifyAuthConfig {
    return this.config;
  }

  /**
   * Traite directement un code d'autorisation Spotify
   * Cette m√©thode est utile lorsque le code d'autorisation est obtenu via une URL de redirection
   */
  async handleAuthorizationCode(code: string): Promise<boolean> {
    try {
      if (!code) {
        console.error('‚ùå Code d\'autorisation manquant');
        return false;
      }

      console.log('üîÑ Traitement du code d\'autorisation Spotify:', code.substring(0, 5) + '...');
      
      if (!isSpotifySDKAvailable() || auth === null) {
        console.warn('‚ùå Les modules Spotify ne sont pas disponibles');
        return false;
      }
      
      if (!this.isInitialized) {
        console.log('‚öôÔ∏è Service non initialis√©, tentative d\'initialisation...');
        const initialized = await this.initialize();
        if (!initialized) {
          console.error('‚ùå √âchec de l\'initialisation');
          return false;
        }
      }
      
      try {
        // Appeler manuellement le serveur d'√©change de tokens
        const tokenSwapUrl = `${this.config.tokenSwapUrl}?code=${encodeURIComponent(code)}&redirect_uri=${encodeURIComponent(this.config.redirectUrl)}`;
        console.log('üîÑ Envoi de la requ√™te d\'√©change de tokens:', tokenSwapUrl);
        
        // Utiliser fetch pour √©changer le code contre un token
        const response = await fetch(tokenSwapUrl);
        if (!response.ok) {
          console.error('‚ùå Erreur lors de l\'√©change de tokens:', await response.text());
          return false;
        }
        
        const tokenData = await response.json();
        console.log('‚úÖ Tokens re√ßus avec succ√®s');
        
        // Sauvegarder les tokens
        await this.saveTokens({
          accessToken: tokenData.access_token,
          refreshToken: tokenData.refresh_token,
          expirationDate: Date.now() + (tokenData.expires_in || 3600) * 1000
        });
        
        // Connecter au service distant Spotify
        await this.connectRemote();
        
        return true;
      } catch (error: any) {
        console.error('‚ùå Erreur lors du traitement du code d\'autorisation:', error.message);
        return false;
      }
    } catch (error: any) {
      console.error('‚ùå Erreur globale lors du traitement du code d\'autorisation:', error.message);
      return false;
    }
  }

  /**
   * M√©thode alternative d'authentification utilisant directement une URL Spotify
   * Utilise le navigateur syst√®me pour l'authentification et intercepte le code via l'URL de redirection
   */
  async authorizeAlternative(): Promise<boolean> {
    try {
      console.log('üîÑ Tentative d\'authentification alternative Spotify');
      
      // G√©n√©rer un √©tat al√©atoire pour s√©curiser la redirection
      const state = Math.random().toString(36).substring(2, 15);
      
      // Construire l'URL d'authentification
      const authUrl = new URL('https://accounts.spotify.com/authorize');
      authUrl.searchParams.append('client_id', this.config.clientId);
      authUrl.searchParams.append('response_type', 'code');
      authUrl.searchParams.append('redirect_uri', this.config.redirectUrl);
      authUrl.searchParams.append('state', state);
      authUrl.searchParams.append('scope', this.config.scopes.join(' '));
      
      console.log('üîó URL d\'authentification construite:', authUrl.toString());
      console.log('üîç V√©rification des param√®tres:');
      console.log('  - ClientID:', this.config.clientId);
      console.log('  - RedirectURI:', this.config.redirectUrl);
      console.log('  - Scopes:', this.config.scopes.join(' '));
      
      // Enregistrer un √©couteur pour intercepter la redirection
      const authPromise = new Promise<string>((resolve, reject) => {
        const subscription = Linking.addEventListener('url', event => {
          const { url } = event;
          console.log('üîó URL de redirection re√ßue:', url);
          
          if (url.includes('spotify-auth-callback')) {
            // Extraire le code et l'√©tat de l'URL
            const code = url.includes('code=') ? url.split('code=')[1].split('&')[0] : null;
            const returnedState = url.includes('state=') ? url.split('state=')[1].split('&')[0] : null;
            
            // V√©rifier l'√©tat pour pr√©venir les attaques CSRF
            if (returnedState !== state) {
              console.error('‚ùå √âtat de redirection invalide');
              subscription.remove();
              reject(new Error('√âtat de redirection invalide'));
              return;
            }
            
            if (code) {
              console.log('‚úÖ Code d\'autorisation re√ßu');
              subscription.remove();
              resolve(code);
            } else {
              console.error('‚ùå Pas de code dans l\'URL de redirection');
              subscription.remove();
              reject(new Error('Pas de code dans l\'URL de redirection'));
            }
          }
        });
        
        // Timeout apr√®s 3 minutes
        setTimeout(() => {
          subscription.remove();
          reject(new Error('Timeout lors de l\'authentification Spotify'));
        }, 3 * 60 * 1000);
      });
      
      // Ouvrir l'URL d'authentification dans le navigateur
      console.log('üåê Ouverture du navigateur pour authentification Spotify:', authUrl.toString());
      await Linking.openURL(authUrl.toString());
      
      // Attendre la redirection avec le code
      const code = await authPromise;
      console.log('üîê Code d\'autorisation re√ßu, √©change contre token...');
      
      // √âchanger le code contre un token
      try {
        // Si nous avons un URL d'√©change de token, l'utiliser
        if (this.config.tokenSwapUrl) {
          console.log('üì° Utilisation du service d\'√©change de token:', this.config.tokenSwapUrl);
          
          // Construire l'URL avec le code
          const tokenUrl = `${this.config.tokenSwapUrl}?code=${code}`;
          console.log('üîó URL d\'√©change de token:', tokenUrl);
          
          // Faire la requ√™te
          const response = await fetch(tokenUrl);
          if (!response.ok) {
            console.error('‚ùå Erreur lors de l\'√©change du code contre un token:', response.status, response.statusText);
            const errorText = await response.text();
            console.error('D√©tails de l\'erreur:', errorText);
            throw new Error('Erreur lors de l\'√©change du code: ' + response.status);
          }
          
          // R√©cup√©rer les tokens
          const tokenData = await response.json();
          console.log('‚úÖ Tokens re√ßus avec succ√®s:', !!tokenData.access_token);
          
          // Sauvegarder les tokens
          if (tokenData.access_token) {
            const expirationDate = Date.now() + (tokenData.expires_in ? tokenData.expires_in * 1000 : 3600 * 1000);
            await this.saveTokens({
              accessToken: tokenData.access_token,
              refreshToken: tokenData.refresh_token || '',
              expirationDate: expirationDate
            });
            
            // Marquer que nous utilisons l'authentification alternative
            this.isUsingAlternativeAuth = true;
            
            // Mettre √† jour l'√©tat de connexion
            this.connectionInfo.isConnected = true;
            this.isInitialized = true;
            
            // V√©rifier le statut premium 
            console.log('üîç V√©rification du statut Premium apr√®s authentification r√©ussie...');
            await this.checkPremiumStatus();
            
            return true;
          } else {
            console.error('‚ùå Tokens non re√ßus dans la r√©ponse');
            return false;
          }
        } else {
          console.error('‚ùå URL d\'√©change de token non configur√©e');
          return false;
        }
      } catch (error: any) {
        console.error('‚ùå Erreur lors de l\'√©change du code d\'autorisation:', error.message);
        return false;
      }
    } catch (error: any) {
      console.error('‚ùå Erreur globale lors de l\'authentification alternative:', error.message);
      return false;
    }
  }

  /**
   * V√©rifie si l'utilisateur a un compte Premium en appelant l'API Spotify
   * Cette m√©thode est plus fiable que la d√©tection via le SDK
   */
  async checkPremiumStatus(): Promise<boolean> {
    try {
      console.log('üîç V√©rification du statut Premium...');
      
      // V√©rifier si nous avons un token valide
      const token = await this.getAccessToken();
      if (!token) {
        console.warn('‚ö†Ô∏è Aucun token d\'acc√®s disponible pour v√©rifier le statut Premium');
        return false;
      }
      
      // Appeler l'API Spotify pour obtenir le profil utilisateur
      console.log('üîÑ Appel de l\'API Spotify pour obtenir les infos utilisateur');
      const response = await fetch('https://api.spotify.com/v1/me', {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });
      
      if (!response.ok) {
        console.error('‚ùå Erreur lors de l\'appel √† l\'API Spotify:', response.status);
        return false;
      }
      
      const userData = await response.json();
      console.log('‚úÖ Donn√©es utilisateur r√©cup√©r√©es:', userData.product);
      
      // V√©rifier si l'utilisateur a un compte premium
      const isPremium = userData.product === 'premium';
      
      // Mettre √† jour l'√©tat interne
      this.connectionInfo.isPremium = isPremium;
      
      if (isPremium) {
        console.log('‚úÖ L\'utilisateur a un compte Premium');
      } else {
        console.log('‚ö†Ô∏è L\'utilisateur n\'a pas de compte Premium (ou information non disponible)');
      }
      
      return isPremium;
    } catch (error: any) {
      console.error('‚ùå Erreur lors de la v√©rification du statut Premium:', error.message);
      return false;
    }
  }

  /**
   * Sauvegarde la m√©thode d'authentification utilis√©e
   */
  private async saveAuthMethod(): Promise<void> {
    try {
      await AsyncStorage.setItem(SPOTIFY_AUTH_METHOD_KEY, 'alternative');
      console.log('‚úÖ M√©thode d\'authentification alternative sauvegard√©e');
    } catch (error) {
      console.error('Erreur lors de la sauvegarde de la m√©thode d\'authentification:', error);
    }
  }

  /**
   * Restaure la m√©thode d'authentification utilis√©e
   */
  private async restoreAuthMethod(): Promise<void> {
    try {
      // V√©rifier d'abord si nous avons un token valide
      const token = await AsyncStorage.getItem(SPOTIFY_ACCESS_TOKEN_KEY);
      const expiration = await AsyncStorage.getItem(SPOTIFY_EXPIRATION_KEY);
      
      const hasToken = token && expiration && parseInt(expiration, 10) > Date.now();
      
      // R√©cup√©rer la m√©thode d'auth (si elle existe)
      const method = await AsyncStorage.getItem(SPOTIFY_AUTH_METHOD_KEY);
      
      // Si nous avons un token valide mais pas de m√©thode enregistr√©e,
      // consid√©rer par d√©faut que c'est l'authentification alternative
      if (hasToken && !method) {
        this.isUsingAlternativeAuth = true;
        // Sauvegarder cette m√©thode pour la prochaine fois
        await this.saveAuthMethod();
        console.log('üîÑ Token valide trouv√© sans m√©thode d\'authentification, utilisation de la m√©thode alternative par d√©faut');
      } else {
        // Sinon utiliser la m√©thode sauvegard√©e
        this.isUsingAlternativeAuth = method === 'alternative';
      }
      
      console.log(`üîç M√©thode d'authentification restaur√©e: ${this.isUsingAlternativeAuth ? 'alternative' : 'native'}`);
      console.log(`üîë Statut du token: ${hasToken ? 'valide' : 'invalide ou expir√©'}`);
    } catch (error) {
      console.error('Erreur lors de la restauration de la m√©thode d\'authentification:', error);
      this.isUsingAlternativeAuth = false;
    }
  }

  /**
   * Efface la m√©thode d'authentification sauvegard√©e
   */
  private async clearAuthMethod(): Promise<void> {
    try {
      await AsyncStorage.removeItem(SPOTIFY_AUTH_METHOD_KEY);
      this.isUsingAlternativeAuth = false;
      console.log('üßπ M√©thode d\'authentification effac√©e');
    } catch (error) {
      console.error('Erreur lors de l\'effacement de la m√©thode d\'authentification:', error);
    }
  }

  /**
   * Force le statut Premium de l'utilisateur
   * Utilis√© pour contourner les v√©rifications dans les contextes o√π nous savons que l'utilisateur est Premium
   * ou lorsque nous voulons permettre la lecture malgr√© les erreurs de v√©rification
   */
  forceSetPremiumStatus(isPremium: boolean): void {
    console.log(`Statut Premium forc√© √†: ${isPremium}`);
    this.connectionInfo.isPremium = isPremium;
  }

  /**
   * Force le statut d'installation de l'application Spotify
   * Utilis√© pour contourner les v√©rifications dans les contextes o√π nous savons que Spotify est install√©
   * ou lorsque nous voulons permettre la lecture malgr√© les erreurs de v√©rification
   */
  forceSetInstallationStatus(isInstalled: boolean): void {
    console.log(`Statut d'installation Spotify forc√© √†: ${isInstalled}`);
    this.connectionInfo.isSpotifyInstalled = isInstalled;
  }
}

export default new SpotifyAuthService(); 